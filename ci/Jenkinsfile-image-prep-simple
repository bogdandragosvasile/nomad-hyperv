pipeline {
    agent {
        label 'linux-vm-prep-agent'
    }
    
    environment {
        VHD_BASE_PATH = '~/hyperv/vhds'
        PREPARED_IMAGE_PATH = '~/hyperv/prepared-images'
        WORKSPACE_PATH = '/tmp/vm-image-prep'
    }
    
    parameters {
        choice(
            name: 'NETWORK_CONFIG_TYPE',
            choices: ['dhcp', 'static'],
            description: 'Network configuration type'
        )
        string(
            name: 'STATIC_IP',
            defaultValue: '192.168.1.100',
            description: 'Static IP address (if using static networking)'
        )
        string(
            name: 'GATEWAY',
            defaultValue: '192.168.1.1',
            description: 'Gateway IP address (if using static networking)'
        )
        string(
            name: 'DNS_SERVERS',
            defaultValue: '8.8.8.8,8.8.4.4',
            description: 'DNS servers (comma-separated)'
        )
        string(
            name: 'IMAGE_NAME',
            defaultValue: 'ubuntu-nomad-consul-prepared',
            description: 'Name for the prepared image'
        )
    }
    
    stages {
        stage('Setup Environment') {
            steps {
                script {
                    setupImagePrepEnvironment()
                }
            }
        }
        
        stage('Download Base Image') {
            steps {
                script {
                    downloadBaseImage()
                }
            }
        }
        
        stage('Mount and Prepare VHD') {
            steps {
                script {
                    mountAndPrepareVHD()
                }
            }
        }
        
        stage('Inject Cloud-Init Configuration') {
            steps {
                script {
                    injectCloudInitConfig()
                }
            }
        }
        
        stage('Unmount and Export') {
            steps {
                script {
                    unmountAndExport()
                }
            }
        }
    }
    
    post {
        always {
            script {
                cleanupWorkspace()
            }
        }
        success {
            echo "✅ VM image preparation completed successfully!"
        }
        failure {
            echo "❌ VM image preparation failed!"
        }
    }
}

def setupImagePrepEnvironment() {
    echo "Setting up image preparation environment..."
    
    sh """
        # Create necessary directories in user space
        mkdir -p ~/hyperv/vhds
        mkdir -p ~/hyperv/prepared-images
        mkdir -p ${env.WORKSPACE_PATH}
        
        # Check if qemu-img is available and working
        if command -v qemu-img &> /dev/null && qemu-img --version &> /dev/null; then
            echo "✅ qemu-img is already available"
            qemu-img --version
        else
            echo "qemu-img not found, trying to install packages..."
            
            # Try to install packages with sudo if available
            if command -v sudo &> /dev/null; then
                echo "Using sudo to install packages..."
                if command -v apt-get &> /dev/null; then
                    echo "Using apt-get to install packages..."
                    sudo apt-get update
                    sudo apt-get install -y qemu-utils kpartx cloud-guest-utils
                elif command -v yum &> /dev/null; then
                    echo "Using yum to install packages..."
                    sudo yum install -y qemu-img kpartx cloud-utils
                elif command -v dnf &> /dev/null; then
                    echo "Using dnf to install packages..."
                    sudo dnf install -y qemu-img kpartx cloud-utils
                fi
            else
                echo "❌ sudo not available, cannot install packages"
                echo "Please install qemu-utils package manually on the agent"
                exit 1
            fi
            
            # Verify qemu-img is available after installation
            if command -v qemu-img &> /dev/null; then
                echo "✅ qemu-img is now available"
                qemu-img --version
            else
                echo "❌ qemu-img is still not available after installation attempt"
                exit 1
            fi
        fi
        
        # Check if we can use sudo for mounting
        if ! sudo -n true 2>/dev/null; then
            echo "Warning: No sudo access, some operations may fail"
        fi
    """
    
    echo "✅ Environment setup completed"
}

def downloadBaseImage() {
    echo "Downloading base Ubuntu VHD image..."
    
    sh """
        cd ~/hyperv/vhds
        
        # Check if base image already exists
        if [ ! -f "livecd.ubuntu-cpc.azure.vhd" ]; then
            echo "Downloading Ubuntu cloud image..."
            wget -O livecd.ubuntu-cpc.azure.vhd.tar.gz \\
                "https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64-azure.vhd.tar.gz"
            
            echo "Extracting VHD from tar.gz..."
            tar -xzf livecd.ubuntu-cpc.azure.vhd.tar.gz
            rm livecd.ubuntu-cpc.azure.vhd.tar.gz
        else
            echo "Base image already exists, skipping download"
        fi
        
        # Verify the VHD file
        ls -la livecd.ubuntu-cpc.azure.vhd
        # Check if file command is available and use it if possible
        if which file >/dev/null 2>&1; then
            file livecd.ubuntu-cpc.azure.vhd
        else
            echo "file command not available, skipping file type check"
        fi
    """
    
    echo "✅ Base image download completed"
}

def mountAndPrepareVHD() {
    echo "Mounting VHD and preparing for modification..."
    
    sh """
        cd ${env.WORKSPACE_PATH}
        
        # Create a working copy of the VHD
        echo "Creating working copy of VHD..."
        cp ${env.VHD_BASE_PATH}/livecd.ubuntu-cpc.azure.vhd ./working-image.vhd
        
        # Convert VHD to raw format for mounting
        echo "Converting VHD to raw format..."
        qemu-img convert -f vpc -O raw working-image.vhd working-image.raw
        
        # Create mount points
        mkdir -p mount-point
        
        # Find the partition offset
        echo "Finding partition offset..."
        PARTITION_OFFSET=\$(fdisk -l working-image.raw | grep "Linux filesystem" | awk '{print \$2}')
        if [ -z "\$PARTITION_OFFSET" ]; then
            echo "Error: Could not find partition offset"
            exit 1
        fi
        
        # Calculate offset in bytes (sectors * 512)
        OFFSET_BYTES=\$((PARTITION_OFFSET * 512))
        echo "Partition offset: \$PARTITION_OFFSET sectors (\$OFFSET_BYTES bytes)"
        
        # Extract filesystem using 7zip (container-compatible approach)
        echo "Extracting filesystem using 7zip..."
        sudo mkdir -p mount-point
        # Use 7zip to extract the filesystem content
        echo "Installing 7zip..."
        sudo apt-get update && sudo apt-get install -y p7zip-full
        echo "Extracting filesystem with offset \$OFFSET_BYTES..."
        # Create a temporary file with the partition content (optimized with larger block size)
        dd if=working-image.raw bs=1M skip=\$((OFFSET_BYTES / 1048576)) of=partition.img
        # Extract the filesystem
        7z x partition.img -oextracted -y
        # Copy extracted content to mount-point
        sudo cp -r extracted/* mount-point/ 2>/dev/null || true
        
        # Verify mount
        ls -la mount-point/
        
        echo "✅ VHD mounted successfully"
    """
    
    echo "✅ VHD mounting completed"
}

def injectCloudInitConfig() {
    echo "Injecting cloud-init configuration..."
    
    script {
        // Get SSH public key from Jenkins credentials
        withCredentials([string(credentialsId: 'ssh-public-key', variable: 'SSH_PUBLIC_KEY')]) {
            // Write SSH key to a file to avoid Groovy interpretation issues
            writeFile file: 'ssh-key.txt', text: env.SSH_PUBLIC_KEY
            
            sh '''
                mkdir -p /tmp/vm-image-prep
                cd /tmp/vm-image-prep
                
                # Create cloud-init directory structure
                echo "Creating cloud-init directory structure..."
                sudo mkdir -p mount-point/var/lib/cloud/seed/nocloud-net
                sudo mkdir -p mount-point/var/lib/cloud/seed/nocloud
                
                # Read SSH key from file
                SSH_KEY=\$(cat ssh-key.txt)
                
                # Write user-data
                echo "Writing user-data..."
                cat > user-data << EOF
#cloud-config
hostname: ubuntu-nomad-consul
fqdn: ubuntu-nomad-consul.local
manage_etc_hosts: true

users:
  - name: ubuntu
    sudo: ALL=(ALL) NOPASSWD:ALL
    shell: /bin/bash
    ssh_authorized_keys:
      - \$SSH_KEY
    lock_passwd: false
    passwd: \\$6\\$rounds=4096\\$salt\\$hash
    groups: [adm, audio, cdrom, dialout, dip, floppy, lxd, netdev, plugdev, sudo, video]

ssh_pwauth: true

package_update: true
package_upgrade: true

packages:
  - openssh-server
  - curl
  - wget
  - unzip
  - python3
  - python3-pip
  - python3-venv
  - git
  - htop
  - vim
  - net-tools
  - dnsutils
  - ca-certificates
  - gnupg
  - lsb-release
  - software-properties-common
  - apt-transport-https

write_files:
  - path: /etc/ssh/sshd_config.d/99-cloud-init.conf
    content: |
      PasswordAuthentication yes
      PubkeyAuthentication yes
      AuthorizedKeysFile .ssh/authorized_keys
      PermitRootLogin no
      MaxAuthTries 6
      ClientAliveInterval 60
      ClientAliveCountMax 3
    permissions: '0644'

runcmd:
  - systemctl enable ssh
  - systemctl restart ssh
  - ufw allow ssh
  - ufw --force enable
  - echo "VM is ready with cloud-init configuration" > /var/log/vm-ready.log
  - systemctl restart networking

final_message: "VM is ready with cloud-init configuration"
EOF
        
                # Write network-config
                echo "Writing network-config..."
                cat > network-config << 'EOF'
network:
  version: 2
  ethernets:
    eth0:
      dhcp4: true
      dhcp6: false
EOF
                
                # Write meta-data
                echo "Writing meta-data..."
                cat > meta-data << 'EOF'
instance-id: ubuntu-nomad-consul
local-hostname: ubuntu-nomad-consul
public-keys:
  - jenkins@nomad-consul
EOF
                
                # Copy files to mounted image
                sudo cp user-data mount-point/var/lib/cloud/seed/nocloud-net/user-data
                sudo cp user-data mount-point/var/lib/cloud/seed/nocloud/user-data
                sudo cp network-config mount-point/var/lib/cloud/seed/nocloud-net/network-config
                sudo cp network-config mount-point/var/lib/cloud/seed/nocloud/network-config
                sudo cp meta-data mount-point/var/lib/cloud/seed/nocloud-net/meta-data
                sudo cp meta-data mount-point/var/lib/cloud/seed/nocloud/meta-data
                
                # Set proper permissions
                sudo chmod 644 mount-point/var/lib/cloud/seed/nocloud-net/*
                sudo chmod 644 mount-point/var/lib/cloud/seed/nocloud/*
                
                # Verify files
                echo "Verifying cloud-init files..."
                ls -la mount-point/var/lib/cloud/seed/nocloud-net/
                ls -la mount-point/var/lib/cloud/seed/nocloud/
                
                echo "✅ Cloud-init configuration injected successfully"
            '''
        }
    }
    
    echo "✅ Cloud-init configuration injection completed"
}

def unmountAndExport() {
    echo "Unmounting VHD and exporting prepared image..."
    
    sh """
        cd ${env.WORKSPACE_PATH}
        
        # Clean up extracted files
        echo "Cleaning up extracted files..."
        sudo rm -rf extracted partition.img
        
        # Convert back to VHD format
        echo "Converting back to VHD format..."
        qemu-img convert -f raw -O vpc working-image.raw ${params.IMAGE_NAME}.vhd
        
        # Copy to prepared images directory
        echo "Copying prepared image..."
        cp ${params.IMAGE_NAME}.vhd ~/hyperv/prepared-images/
        
        # Verify the prepared image
        echo "Verifying prepared image..."
        ls -la ~/hyperv/prepared-images/${params.IMAGE_NAME}.vhd
        # Check if file command is available and use it if possible
        if which file >/dev/null 2>&1; then
            file ~/hyperv/prepared-images/${params.IMAGE_NAME}.vhd
        else
            echo "file command not available, skipping file type check"
        fi
        
        echo "✅ Image preparation completed successfully"
    """
    
    echo "✅ VHD unmounting and export completed"
}

def cleanupWorkspace() {
    echo "Cleaning up workspace..."
    
    sh """
        # Create workspace directory if it doesn't exist
        mkdir -p ${env.WORKSPACE_PATH}
        cd ${env.WORKSPACE_PATH}
        
        # Unmount if still mounted
        if mountpoint -q mount-point; then
            sudo umount mount-point
        fi
        
        # Clean up files
        rm -f working-image.vhd working-image.raw
        rm -f user-data network-config meta-data
        rm -rf mount-point
        
        echo "✅ Workspace cleanup completed"
    """
    
    echo "✅ Workspace cleanup completed"
}
