---
# Ansible playbook for common configuration across all nodes
- name: Common Configuration for All Nodes
  hosts: cluster_nodes
  become: true
  gather_facts: true
  
  vars:
    timezone: "{{ timezone | default('UTC') }}"
    locale: "{{ locale | default('en_US.UTF-8') }}"
    
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
        
    - name: Install common packages
      apt:
        name:
          - curl
          - wget
          - htop
          - vim
          - git
          - unzip
          - tree
          - net-tools
          - iputils-ping
          - dnsutils
          - telnet
          - tcpdump
          - iotop
          - sysstat
          - logrotate
          - rsyslog
        state: present
        
    - name: Set timezone
      timezone:
        name: "{{ timezone }}"
        
    - name: Configure locale
      locale_gen:
        name: "{{ locale }}"
        state: present
        
    - name: Update locale
      command: update-locale LANG={{ locale }}
      
    - name: Configure hostname
      hostname:
        name: "{{ inventory_hostname }}"
        
    - name: Update /etc/hosts
      lineinfile:
        path: /etc/hosts
        line: "{{ ansible_default_ipv4.address }} {{ inventory_hostname }}"
        regexp: "{{ ansible_default_ipv4.address }}"
        state: present
        
    - name: Configure SSH
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
      loop:
        - { regexp: '^#?PermitRootLogin', line: 'PermitRootLogin no' }
        - { regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication no' }
        - { regexp: '^#?PubkeyAuthentication', line: 'PubkeyAuthentication yes' }
        - { regexp: '^#?AuthorizedKeysFile', line: 'AuthorizedKeysFile .ssh/authorized_keys' }
      notify: restart ssh
      
    - name: Configure UFW firewall
      ufw:
        state: enabled
        policy: deny
        direction: incoming
        rule: allow
        port: ssh
        proto: tcp
      when: enable_ufw | bool
      
    - name: Configure system limits
      pam_limits:
        domain: '*'
        limit_type: '-'
        limit_item: nofile
        value: 65536
        
    - name: Configure kernel parameters
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      loop:
        - { name: 'vm.max_map_count', value: '262144' }
        - { name: 'fs.file-max', value: '65536' }
        - { name: 'net.core.somaxconn', value: '65535' }
        - { name: 'net.ipv4.tcp_max_syn_backlog', value: '65535' }
        
    - name: Create log directory
      file:
        path: "{{ log_path | default('/var/log/nomad-consul') }}"
        state: directory
        mode: '0755'
        owner: root
        group: root
        
    - name: Configure logrotate
      template:
        src: logrotate.conf.j2
        dest: /etc/logrotate.d/nomad-consul
        mode: '0644'
        
    - name: Configure rsyslog
      template:
        src: rsyslog.conf.j2
        dest: /etc/rsyslog.d/99-nomad-consul.conf
        mode: '0644'
      notify: restart rsyslog
      
    - name: Install monitoring tools
      block:
        - name: Download Node Exporter
          get_url:
            url: "https://github.com/prometheus/node_exporter/releases/download/v{{ node_exporter_version }}/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz"
            dest: /tmp/node_exporter.tar.gz
            mode: '0644'
          when: enable_monitoring | bool
          
        - name: Extract Node Exporter
          unarchive:
            src: /tmp/node_exporter.tar.gz
            dest: /tmp/
            remote_src: yes
            creates: /tmp/node_exporter-{{ node_exporter_version }}.linux-amd64
          when: enable_monitoring | bool
          
        - name: Install Node Exporter
          copy:
            src: /tmp/node_exporter-{{ node_exporter_version }}.linux-amd64/node_exporter
            dest: /usr/local/bin/node_exporter
            mode: '0755'
            remote_src: yes
          when: enable_monitoring | bool
          
        - name: Create Node Exporter service
          template:
            src: node_exporter.service.j2
            dest: /etc/systemd/system/node_exporter.service
            mode: '0644'
          when: enable_monitoring | bool
          
        - name: Enable and start Node Exporter
          systemd:
            name: node_exporter
            enabled: yes
            state: started
            daemon_reload: yes
          when: enable_monitoring | bool
          
        - name: Configure firewall for Node Exporter
          ufw:
            rule: allow
            port: '9100'
            proto: tcp
          when: enable_monitoring | bool and enable_ufw | bool
      when: enable_monitoring | bool
      
    - name: Configure backup script
      block:
        - name: Create backup directory
          file:
            path: "{{ backup_path | default('/opt/backups') }}"
            state: directory
            mode: '0755'
            owner: root
            group: root
          when: backup_enabled | bool
          
        - name: Create backup script
          template:
            src: backup.sh.j2
            dest: /usr/local/bin/backup-nomad-consul.sh
            mode: '0755'
            owner: root
            group: root
          when: backup_enabled | bool
          
        - name: Create backup cron job
          cron:
            name: "Backup Nomad Consul"
            minute: "0"
            hour: "2"
            job: "/usr/local/bin/backup-nomad-consul.sh"
          when: backup_enabled | bool
      when: backup_enabled | bool
      
    - name: Configure systemd journal
      lineinfile:
        path: /etc/systemd/journald.conf
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
      loop:
        - { regexp: '^#?SystemMaxUse', line: 'SystemMaxUse=1G' }
        - { regexp: '^#?SystemMaxFileSize', line: 'SystemMaxFileSize=100M' }
        - { regexp: '^#?MaxRetentionSec', line: 'MaxRetentionSec=30day' }
        
    - name: Configure systemd logind
      lineinfile:
        path: /etc/systemd/logind.conf
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
      loop:
        - { regexp: '^#?HandlePowerKey', line: 'HandlePowerKey=ignore' }
        - { regexp: '^#?HandleSuspendKey', line: 'HandleSuspendKey=ignore' }
        - { regexp: '^#?HandleHibernateKey', line: 'HandleHibernateKey=ignore' }
        
    - name: Configure systemd coredump
      lineinfile:
        path: /etc/systemd/coredump.conf
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
      loop:
        - { regexp: '^#?Storage', line: 'Storage=journal' }
        - { regexp: '^#?Compress', line: 'Compress=yes' }
        - { regexp: '^#?ProcessSizeMax', line: 'ProcessSizeMax=2G' }
        
  handlers:
    - name: restart ssh
      systemd:
        name: ssh
        state: restarted
        
    - name: restart rsyslog
      systemd:
        name: rsyslog
        state: restarted
